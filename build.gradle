plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT' apply false
    id 'java'
    id 'maven-publish'
}

def targetJavaVersion = 21

ext.mcDependencies = [
        minecraft: "com.mojang:minecraft:${project.minecraft_version}",
        mappings: "net.fabricmc:yarn:${project.yarn_mappings}:v2",
        fabricLoader: "net.fabricmc:fabric-loader:${project.loader_version}",
        fabricApi: "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
]

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    group = project.maven_group

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    loom {
        runs {
            testmodClient {
                client()
                source(sourceSets.testmod)

                name = "Test Mod Client"
            }

            testmodServer {
                server()
                source(sourceSets.testmod)

                name = "Test Mod Server"
            }
        }

        createRemapConfigurations(sourceSets.testmod)
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        testmodImplementation sourceSets.main.output
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(ProcessResources).configureEach {
        inputs.property "module_version", version
        inputs.property "module_name", project.module_name
        inputs.property "module_description", project.module_description
        inputs.property "minecraft_version", project.minecraft_version
        inputs.property "loader_version", project.loader_version

        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand(inputs.properties)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = targetJavaVersion
        it.options.compilerArgs.add("-Xlint:unchecked")
    }

    tasks.withType(Jar).configureEach {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${project.name}" }
        }
    }
}

subprojects {
    version = project.module_version

    publishing {
        publications {
            create("mavenJava", MavenPublication) {
                from components.java
                artifactId = project.name
                groupId = project.group
                version = project.version

                pom {
                    name = properties["module_name"]
                    description = properties["module_description"]
                    url = properties["github_url"]
                    licenses {
                        license {
                            name = "MIT"
                        }
                    }
                    developers {
                        developer {
                            url = "https://bnjc.dev"
                            name = "bnjc"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/blackjack26/bglib.git"
                        developerConnection = "scm:git:git://github.com/blackjack26/bglib.git"
                        url = properties["github_url"]
                    }
                }
            }
        }

        repositories {
            maven {
                name = 'GitHubPackages'
                url = uri("https://maven.pkg.github.com/blackjack26/bglib")

                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME_GITHUB")
                    password = project.findProperty("gpr.token") ?: System.getenv("TOKEN_GITHUB")
                }
            }
        }
    }
}

dependencies {
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    afterEvaluate {
        subprojects.each {
            implementation project(path: ":${it.path}", configuration: "namedElements")
            testmodImplementation project(":${it.path}").sourceSets.testmod.output
        }
    }
}