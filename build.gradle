plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT' apply false
    id 'java'
    id 'maven-publish'
}

def targetJavaVersion = 21

allprojects {
    apply plugin: 'java'
    apply plugin: 'fabric-loom'

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    group = project.maven_group

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    java {
        withSourcesJar()
        withJavadocJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(ProcessResources).configureEach {
        inputs.property "module_version", version
        inputs.property "module_name", project.module_name
        inputs.property "module_description", project.module_description
        inputs.property "minecraft_version", project.minecraft_version
        inputs.property "loader_version", project.loader_version

        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand(inputs.properties)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = targetJavaVersion
        it.options.compilerArgs.add("-Xlint:unchecked")
    }

    tasks.withType(Jar).configureEach {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${project.name}" }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'

    version = project.module_version

    publishing {
        publications {
            create("mavenJava", MavenPublication) {
                artifact(remapJar) {
                    builtBy(remapJar)
                }

                artifact(remapSourcesJar) {
                    builtBy(remapSourcesJar)
                }

                pom {
                    name = properties["module_name"]
                    description = properties["module_description"]
                    url = properties["github_url"]
                    licenses {
                        license {
                            name = "MIT"
                        }
                    }
                    developers {
                        developer {
                            url = "https://bnjc.dev"
                            name = "bnjc"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/blackjack26/bglib.git"
                        developerConnection = "scm:git:git://github.com/blackjack26/bglib.git"
                        url = properties["github_url"]
                    }
                }
            }
        }

        repositories {
            maven {
                name = 'CustomRepo'
                url = uri("${rootProject.projectDir}/../bnjc-maven/public")
            }
        }
    }

    // Ensure sourcesJar is only generated once
    tasks.named('sourcesJar') {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api project(path: "${it.path}", configuration: "namedElements")
        }
    }
}

configurations {
    nestedJars {
        transitive = true
    }
}

dependencies {
    subprojects.each {
        nestedJars project("${it.path}")
    }
}

remapJar {
    nestedJars.from configurations.nestedJars
}

assemble.dependsOn(remapJar)